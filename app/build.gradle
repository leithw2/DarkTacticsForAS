apply plugin: 'com.android.application'

configurations {
    natives
}


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.indiegen.darktactics"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 10
        versionName "0.0.0870"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.badlogicgames.gdx:gdx-backend-android:1.9.2'
    natives "com.badlogicgames.gdx:gdx-platform:1.9.2:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:1.9.2:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.9.2:natives-x86"
    // Testing libraries.
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'com.badlogicgames.gdx:gdx-backend-headless:1.9.2'
    testCompile 'com.badlogicgames.gdx:gdx:1.9.2'
    testCompile 'com.badlogicgames.gdx:gdx-platform:1.9.2:natives-desktop'
    testCompile 'org.slf4j:slf4j-api:1.7.10'
    compile project(':game')
}

// Extract the libGDX natives from the JARs.
task copyAndroidNatives() {
    file("src/main/jniLibs/armeabi/").mkdirs();
    file("src/main/jniLibs/armeabi-v7a/").mkdirs();
    file("src/main/jniLibs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
